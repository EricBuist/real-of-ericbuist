<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta name="generator"
      content="HTML Tidy for Java (vers. 2009-12-01), see jtidy.sourceforge.net" />
      <title>
         GRUB et l'UEFI: peuvent-ils être réunis?
      </title>
      <meta http-equiv="Content-Type"
      content="application/xhtml+xml; charset=UTF-8" />
      <meta name="author" content="Eric Buist" />
      <meta name="viewport"
      content="width=device-width, initial-scale=1.0" />
      <meta name="HandheldFriendly" content="true" />
      <link rel="stylesheet" type="text/css" href="../main.css" />
   </head>
   <body>
      <table class="topnavbar" width="100%">
         <tr>
            <td class="parents" colspan="3">
               <a href="../index.xhtml" class="parents">Le royaume
               de Eric Buist</a> &gt;&gt; <a href="index.xhtml"
               class="parents">Informatique</a> &gt;&gt;
               Quelques-unes de mes recherches personnelles
            </td>
         </tr>
         <tr>
            <td class="contact">
               <a href="../contact.xhtml" class="contact">Me
               contacter</a>
            </td>
            <td class="topnavbar">
            </td>
            <td class="sitemap">
               <a href="../sitemap.xhtml" class="sitemap">Plan du
               site</a>
            </td>
         </tr>
         <tr>
            <td class="leftsibling">
               &lt;&lt; <a href="capture.xhtml"
               class="leftsibling">Capture de contenu depuis
               Internet</a>
            </td>
            <td class="thispage">
               GRUB et l'UEFI: peuvent-ils être réunis?
            </td>
            <td class="rightsibling">
               <a href="screencast.xhtml"
               class="rightsibling">Capture vidéo de l'écran</a>
               &gt;&gt;
            </td>
         </tr>
      </table>
      <h1>
         GRUB et l'UEFI: peuvent-ils être réunis?
      </h1>
      <p>
         La première chose dont je me suis rendu compte quand j'ai
         voulu installer Linux sur mon nouvel ordinateur, le <a
         href="drake/linuxhd.xhtml">Drake</a>, c'est à quel point
         je me suis tiré une balle dans le pied en installant
         Windows 7 de sorte qu'il démarre de façon native par
         rapport à l'UEFI. À cause de ça, je devais installer Linux
         aussi en mode UEFI de sorte que le gestionnaire d'amorçage
         GRUB puisse me permettre de choisir entre Windows et Linux
         au démarrage. Bien que les versions récentes de Linux
         prennent l'UEFI en charge en théorie, il en va tout
         autrement en pratique. Il suffit de chercher GRUB UEFI
         sous Google pour tomber sur des cinquantaines de posts de
         forums relatant d'insolubles problèmes d'installation qui
         réussissent mais de systèmes refusant de démarrer!
         Plusieurs affirment que GRUB2 est bogué et ne permet pas
         un démarrage correct en mode UEFI sur certaines machines.
         C'est peut-être vrai, peut-être pas, car il y a très peu
         d'indices au-delà de cela. Peu de gens semblent savoir ce
         qui se passe exactement et pouvoir établir des diagnostics
         précis. La seule page qui m'a vraiment aidé est le <a
         href="http://www.rodsbooks.com/refind/installing.html">guide
         d'installation de rEFInd</a>! Il me semble donc utile sur
         cette page de comparer le processus d'amorçage BIOS avec
         celui de l'UEFI et dresser une liste d'obstacles à
         franchir pour que GRUB puisse enfin démarrer en UEFI sur,
         espérons-le, la majorité des systèmes.
      </p>
      <h2>
         Le bon vieux BIOS
      </h2>
      <p>
         Dans le bon vieux temps, lorsque l'ordinateur démarrait,
         le processeur se trouvait dans ce qu'on appelle le
         <em>mode réel</em>. Ce mode exécute seulement un
         sous-ensemble primitif d'instructions sur 16 bits et ne
         permet l'accès qu'à un méga-octet de mémoire. C'est dans
         ce mode que s'exécutait le vénérable MS-DOS des années
         1980. L'environnement de pré-amorçage était le BIOS et
         s'exécutait entièrement en mode réel.
      </p>
      <p>
         Le rôle du BIOS était d'effectuer des tests de base et
         d'appliquer une séquence linéaire de recherche afin de
         trouver un périphérique sur lequel un premier secteur de
         512 octets pouvait être lu (sans tenir compte de sa
         structure interne) et exécuté en mémoire comme un
         programme, encore en mode réel. Ce secteur d'amorçage
         devait alors soit démarrer le système d'exploitation, soit
         indiquer au BIOS de passer la main au prochain
         périphérique de la séquence. Habituellement, ce programme
         primitif est écrit en assembleur.
      </p>
      <p>
         Ce premier secteur, qu'on appelle <em>master boot
         record</em> (MBR), localise habituellement une zone du
         disque dur appelée partition sur laquelle un autre secteur
         d'amorçage se trouve. Encore une fois, très peu
         d'hypothèses sont faites sur la structure interne du
         disque, à l'exception du premier secteur qui doit contenir
         une table de partitions dans le format MBR. Le code dans
         le premier secteur d'une partition, par contre, s'appuie
         sur sa structure pour amorcer un système d'exploitation.
         Ce dernier demande au processeur de passer en mode protégé
         qui permet d'accéder à toute la mémoire de la machine et
         peut exécuter des instructions sur 32 et même 64 bits.
      </p>
      <p>
         Lorsque Linux est installé sur un tel système, le
         programme d'installation remplace le secteur d'amorçage
         par un code démarrant une application simple permettant de
         choisir quel système démarrer. C'est cela qu'on appelle le
         <em>gestionnaire d'amorçage</em>. Autrefois, on utilisait
         LILO pour cela, mais la plupart des distributions
         courantes se servent de GRUB. Le gestionnaire d'amorçage
         va s'occuper de charger et démarrer le noyau dans le cas
         de Linux, ou simplement passer le contrôle au premier
         secteur d'une partition désignée dans le cas de Windows.
      </p>
      <p>
         C'est simple, relativement efficace mais pas très flexible
         et propice aux erreurs. Combien de fois Windows, pendant
         sa réinstallation, a-t-il effacé GRUB en remplaçant le
         secteur d'amorçage par le sien? Combien de fois ai-je
         constaté que le système pouvait démarrer depuis un disque
         dur externe mais pas d'un CD branché dans un lecteur DVD
         USB? Et que dire des ordinateurs qui, même en 2010, ne
         peuvent toujours pas s'amorcer depuis une clé USB? Ce sont
         toutes des limitations causées par le BIOS qui doit
         demeurer très simpliste afin de tenir dans un simple
         méga-octet de mémoire.
      </p>
      <p>
         La MBR impose elle aussi son lot de limitations. Elle
         n'autorise que quatre partitions primaires sur le disque.
         Il est certes possible de créer une partition étendue
         permettant d'accueillir autant de partitions logiques que
         nécessaire, mais seules les partitions primaires peuvent
         être rendues amorçables. Pire encore, la MBR <a
         href="http://blogs.technet.com/b/askcore/archive/2010/02/18/understanding-the-2-tb-limit-in-windows-storage.aspx">limite
         la taille d'un d'une partition à 2 terra-octets</a>. C'est
         gros direz-vous, mais des disques de plus de 2
         terra-octets sont maintenant disponibles.
      </p>
      <h2>
         L'UEFI, plus simple mais aussi plus complexe
      </h2>
      <p>
         Avec l'UEFI, les choses se passent de façon très
         différente. D'abord, tout l'environnement de pré-amorçage
         s'exécute en mode protégé. Cela signifie que le
         microprogramme de départ n'a plus à être si primitif que
         ça. Il peut initialiser une pile de gestion USB, la prise
         en charge du réseau et surtout accéder à des systèmes de
         fichiers. Ainsi, l'environnement de pré-amorçage est un
         système d'exploitation miniature. Il ne prend pas en
         charge le multitâches, mais il peut exécuter des
         applications compilées en C/C++, pas seulement en
         assembleur comme dans le bon vieux temps. Il existe un <a
         href="http://sourceforge.net/apps/mediawiki/tianocore/index.php?title=Efi-shell">shell
         EFI</a> qui permet véritablement d'exécuter des commandes
         et des scripts, de quoi faire frétiller le geek qui
         sommeille en vous. L'UEFI permet aussi la construction
         d'applications de configuration plus élaborées, avec un
         affichage graphique, prise en charge de la souris et plus
         d'options d'amorçage qu'avec le BIOS.
      </p>
      <p>
         L'amorçage UEFI se passe donc de façon plus flexible.
         Plutôt que simplement lister des périphériques, le
         microprogramme examine leur contenu à la recherche
         d'exécutables de type UEFI et offre un point d'amorçage
         pour chacun de ces exécutables.
      </p>
      <p>
         Chaque système d'exploitation peut alors fournir son
         propre exécutable UEFI qui effectue l'amorçage, avec la
         possibilité de s'exécuter en mode protégé, afficher du
         contenu à l'écran de façon indépendante du matériel,
         interagir au besoin avec l'usager, puis enfin, espérons-le
         en tout cas, charger le système d'exploitation proprement
         dit et lui passer le contrôle total!
      </p>
      <p>
         Que la version UEFI de GRUB soit boguée ne sera
         éventuellement plus un problème, car il est possible de
         compiler les noyaux de Linux de sorte à les transformer en
         véritables applications UEFI. L'environnement de
         pré-amorçcage peut alors directement passer le contrôle au
         noyau de Linux! Que fait-on alors pour passer le contrôle
         à un autre système d'exploitation que Linux? Eh bien on
         utilise les options offertes par la carte mère, souvent
         très limitées, ou on installe un gestionnaire d'amorçage
         indépendant comme <a
         href="http://www.rodsbooks.com/refind/">rEFInd</a>. C'est
         simplement une autre application UEFI qui va utiliser
         toute la puissance de l'environnement de pré-amorçage pour
         offrir un menu permettant à l'usager de choisir vers
         quelle appliaction UEFI passer le contrôle. Il me faudra
         éventuellement vérifier cela, mais d'après ce que j'ai
         compris, le gestionnaire d'amorçage intégré dans le
         microprogramme de la carte mère et ceux offerts séparément
         accèdent aux mêmes interfaces, si bien qu'ils disposent
         des mêmes options d'amorçage en interne. Ce qu'ils
         exposent à l'usager varie bien entendu d'un gestionnaire à
         l'autre; tous ne sont pas égaux. En général, rEFInd est
         beaucoup plus polyvalent que ce qui vient avec la carte
         mère.
      </p>
      <p>
         Que fait-on des vieux systèmes d'exploitation non
         compatibles avec l'UEFI? Eh bien l'environnement de
         pré-amorçage dispose d'un module de compatibilité
         permettant de repasser en mode réel et passer le contrôle
         à un secteur d'amorçage comme avant. À ce point, l'UEFI
         s'efface complètement, permettant au système
         d'exploitation de voir la machine comme si elle possédait
         un BIOS tout à fait ordinaire. Pour cette raison, si
         j'avais installé Linux en mode BIOS plutôt que UEFI, GRUB
         n'aurait pas permis d'amorcer Windows en UEFI. Il aurait
         alors fallu tout réinstaller en mode BIOS pour pouvoir
         démarrer tous les systèmes depuis GRUB, ou installer GRUB
         sur la partition où Linux se trouve (pas la MBR) et
         utiliser rEFInd pour permettre de choisir entre Windows et
         Linux. Le même problème se produit avec Chameleon,
         nécessaire pour charger Mac OS X, et pour le moment il n'y
         a aucune solution, car je n'ai pu trouver aucune version
         UEFI de Chameleon, le logiciel s'installe dans la MBR et
         rEFInd ne peut pas amorcer une MBR, seulement une
         partition.
      </p>
      <p>
         Le gros problème avec tout ça, c'est que toutes les
         implémentations de l'UEFI ne sont pas égales. Elles ne
         répertorient pas toutes de la même façon la liste des
         applications UEFI vers lesquelles donner le contrôle. En
         gros, les règles suivantes s'appliquent:
      </p>
      <ul>
         <li>
            Pour tout périphérique amovible partitionné détecté
            (clé USB, disque dur externe, etc.), l'UEFI recherche
            un répertoire <tt>EFI</tt> sur toutes les partitions et
            liste un point d'amorçage UEFI pour chaque fichier dont
            le nom ressemble à <tt>BOOTX64.EFI</tt> dans le
            répertoire <tt>EFI</tt>. Deux formats de tables des
            partitions sont pris en charge: l'ancien MBR et le
            nouveau GPT. Mais rien ne dit que certaines cartes
            mères ne vont pas gérer uniquement le MBR pour les
            périphériques amovibles comme les clés USB. Par contre,
            il y a de bonnes chances pour que les interfaces de
            l'UEFI permettent d'amorcer tout ça si bien qu'un
            gestionnaire d'amorçage indépendant comme rEFInd
            pourrait outrepasser les limitations imposées par la
            carte mère, quitte à charger des modules UEFI
            additionnels.
         </li>
         <li>
            Pour un CD ou un DVD, l'UEFI procède de façon similaire
            au disque dur amovible, mais considère le disque comme
            une seule partition. De plus, seuls les systèmes de
            fichiers pour CD et DVD sont pris en charge: ISO9660,
            peut-être UDF.
         </li>
         <li>
            Pour qu'un amorçage UEFI ait lieu depuis un disque
            fixe, ce dernier doit comporter une partition spéciale
            appelée <em>EFI System Partition</em> (ESP) avec un
            identifiant spécial. Cette dernière, habituellement en
            FAT32, des fois en FAT16, contient un répertoire
            <tt>EFI</tt> dans lequel on trouve un sous-répertoire
            pour chaque système installé. La structure interne n'a
            pas une grande importance, car les applications EFI à
            proposer doivent être répertoriées dans la NVRAM de la
            carte mère. Le type de partitionnement (MBR ou GPT)
            supporté ainsi que les systèmes de fichiers dans
            lesquels l'ESP peut se présenter varient d'une carte
            mère à l'autre, transformant la configuration d'un
            amorçage natif UEFI en véritable torture.
            Habituellement, la combinaison GPT et FAT32 a de bonnes
            chances de fonctionner. Pour pimenter encore les
            choses, certaines cartes mères ne réagissent pas bien
            quand Linux essaie d'enregistrer son application EFI
            dans la NVRAM; elles l'ignorent purement et simplement!
            Il est aussi possible de configurer l'UEFI de sorte
            qu'elle n'amorce que des systèmes comportant une
            signature numérique; on appelle cela le Secure Boot.
            Par chance, il est habituellement possible de
            désactiver cette fonctionalité sur les machines Intel.
         </li>
         <li>
            Pour chaque périphérique de stockage trouvé, l'UEFI
            liste une entrée en mode BIOS. Contrairement aux vieux
            systèmes, cela se produit presque sans discrimination
            pour les CD, DVD et clés USB. S'il y a plusieurs
            disques durs dans la machine, il sera possible de
            choisir le disque à amorcer, pas besoin de brancher le
            disque physiquement dans le premier port SATA pour
            qu'il soit amorçable. En théorie du moins... Encore une
            fois, il peut y avoir de la variance entre les
            différentes cartes mères! Sachez aussi que ça peut
            devenir un vrai casse-tête quand plusieurs disques durs
            identiques sont installés (j'ai essayé ça...)! La carte
            mère saura les distinguer, mais leur étiquette sera
            exactement la même!
         </li>
      </ul>
      <p>
         Pour pimenter les choses encore un peu, l'utilisateur peut
         paramétriser l'amorçage! Il est possible d'interdire le
         démarrage en mode BIOS, celui en mode UEFI, de donner
         priorité à un système plutôt qu'un autre, etc. Certaines
         cartes mères comme la mienne permettent, à l'appui d'une
         touche comme F8, d'outrepasser la cible d'amorçage par
         défaut pour un démarrage donné, d'autres pas.
      </p>
      <h2>
         Pourquoi cela échoue-t-il avec GRUB?
      </h2>
      <p>
         Eh bien, les raisons sont multiples! En voici
         quelques-unes auxquelles je peux penser, mais il pourrait
         y en avoir d'autres.
      </p>
      <ol>
         <li>
            L'installation de Linux s'est passée en mode BIOS. Au
            mieux, GRUB sera alors installé en mode BIOS et pourra
            démarrer Linux normalement. Mais il ne saura atteindre
            Windows en mode UEFI. Le mieux à faire dans un tel cas
            est d'installer un gestionnaire d'amorçage tel que
            rEFInd. Lui saura trouver Windows et Linux. Mais rEFInd
            n'est pas facile à installer depuis Windows et exige,
            sous Linux, un démarrage UEFI. Pour que l'installation
            de Linux démarre en UEFI, il faut accéder aux
            paramètres de l'UEFI et s'assurer que la version UEFI
            de la cible Linux est choisie comme oint d'amorçage.
            Sur ma carte mère, il me suffit d'appuyer sur F8 au
            démarrage et choisir le lecteur DVD préfixé par EFI
            pour y parvenir. Si la machine s'exécute en UEFI, un
            répertoire non vide <tt>/sys/firmware/efi</tt> sera
            disponible.
         </li>
         <li>
            L'installation peut ne pas créer correctement l'ESP.
            C'est possible surtout dans le cas d'une table des
            partitions vide. Un installeur simpliste va créer une
            MBR au lieu d'une GPT comme table de partitions, une
            ESP en FAT12 au lieu de FAT16 ou FAT32, une ESP sans
            l'identifiant correct. Dans ce temps-là, l'installation
            va réussir, mais le système Linux ne va pas démarrer.
            Il faut alors employer GParted pour vérifier tout ça et
            possiblement apporter des correctifs. Si GParted ne
            peut pas convertir un disque dur MBR en GPT et
            Microsoft prétend que c'est impossible aussi, sachez
            que GDisk peut le faire, sans perte de données.
         </li>
         <li>
            L'ESP peut être créée correctement, mais il se peut que
            la mise à jour de la NVRAM n'ait pas eu lieu. Encore
            une fois, si c'est le cas, l'installation va réussir
            mais pas le démarrage suivant. La première chose à
            tenter dans ce temps-là est de mettre l'UEFI à jour
            puis retenter l'installation, ou tenter d'appliquer des
            correctifs avec <tt>efibootmgr</tt>. En cas d'échec, on
            peut essayer de renommer l'application EFI dans le
            répertoire Linux de l'ESP. Des noms courants sont
            <tt>BOOTX64.EFI</tt> et <tt>BOOTMGFW.EFI</tt>. Il
            faudra au pire rajouter l'application EFI manuellement
            avec <tt>efibootmgr</tt> depuis un environnement Linux
            amorcé en UEFI (un live CD par exemple).
         </li>
         <li>
            Autre cas possible, hypothétique celui-là: GRUB
            pourrait faire appel à des interfaces non implémentées
            dans l'UEFI utilisée. Dans un tel cas, GRUB va démarrer
            et planter ou afficher des messages d'erreur sans queue
            ni tête. Le mieux à faire dans un tel cas est d'essayer
            de mettre l'UEFI à jour. En cas d'échec, il faudra
            essayer une autre version de GRUB, ELILO, la version
            Fedora de GRUB Legacy ou un noyau compilé en tant
            qu'application EFI. Il faudra peut-être compiler le
            noyau manuellement ou utiliser une autre distribution
            de Linux pour obtenir le noyau UEFI!
         </li>
      </ol>
      <p>
         Bref, ce n'est pas très beau, mais c'est temporaire.
         Éventuellement, ces problèmes seront corrigés et, je
         l'espère, tous les noyaux seront compilés en tant
         qu'appliactions UEFI de sorte que le chargement et la
         gestion d'amorçage seront des procédés bien distincts et
         interchangeables.
      </p>
      <div class="footer">
         <a href="http://validator.w3.org/check?uri=referer"><img
         src="http://www.w3.org/Icons/valid-xhtml10"
         alt="Valid XHTML" height="31" width="88" /></a><a
         href="http://jigsaw.w3.org/css-validator/check/referer"><img
          src="http://jigsaw.w3.org/css-validator/images/vcss"
         alt="Valid CSS" height="31" width="88" /></a>
      </div>
   </body>
</html>

